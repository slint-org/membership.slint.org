<?php

/**
 * @file
 * Module file for Lazy-load.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_help().
 */
function lazy_help($route_name) {
  switch ($route_name) {
    case 'help.page.lazy':
      $readme = file_get_contents(__DIR__ . '/README.md');

      if (\Drupal::moduleHandler()->moduleExists('markdown')) {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($readme, 'en');
      }

      return '<pre>' . $readme . '</pre>';
  }

  return NULL;
}

/**
 * Returns supported field-types.
 *
 * @return array
 *   Returns a list of field formatters that supports lazy-loading.
 *
 * @deprecated in lazy:8.x-3.0 and is removed from lazy:8.x-3.1.
 *   Use lazy_field_formatters() instead.
 *
 * @see https://www.drupal.org/node/3087642
 */
function lazy_field_types() {
  @trigger_error('lazy_field_types() is deprecated in lazy:8.x-3.0 and is removed from lazy:8.x-3.1. Use lazy_field_formatters() instead. See https://www.drupal.org/node/3087642', E_USER_DEPRECATED);
  return lazy_field_formatters();
}

/**
 * Supported field formatters that Lazy-load can be enabled.
 *
 * Other modules can override this list of the field formatters via a
 * `hook_lazy_field_formatters_alter(&$formatters)`  hook.
 *
 * @return array
 *   Returns a list of field formatters that supports lazy-loading.
 */
function lazy_field_formatters() {
  $formatters = [];

  $moduleHandler = \Drupal::moduleHandler();
  if ($moduleHandler->moduleExists('colorbox')) {
    $formatters[] = 'colorbox';
  }
  if ($moduleHandler->moduleExists('image')) {
    $formatters[] = 'image';
  }
  if ($moduleHandler->moduleExists('media')) {
    $formatters[] = 'media_thumbnail';
  }
  if ($moduleHandler->moduleExists('responsive_image')) {
    $formatters[] = 'responsive_image';
  }

  \Drupal::service('module_handler')->alter('lazy_field_formatters', $formatters);
  $formatters = array_values(array_unique($formatters));

  return $formatters;
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function lazy_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, array $form, FormStateInterface $form_state) {
  $element = [];

  if (in_array($plugin->getPluginId(), lazy_field_formatters(), TRUE)) {
    $default_value = $plugin->getThirdPartySetting('lazy', 'lazy_image', FALSE);
    $image_fields = \Drupal::config('lazy.settings')->get('image_fields');
    $image_fields = is_array($image_fields) ? $image_fields : [];
    $key = '';

    if ($field_definition instanceof FieldConfig) {
      $key = str_replace('.', '--', $field_definition->id() . '.' . $view_mode);
    }
    elseif ($field_definition instanceof BaseFieldDefinition) {
      $entity_type = $form['#entity_type'];
      $bundle = $form['#bundle'];

      $key = "${entity_type}--${bundle}--field_media_image--${view_mode}";
    }

    if (!isset($image_fields[$key]) || (isset($image_fields[$key]) && ($default_value !== $image_fields[$key]))) {
      $image_fields[$key] = (bool) $default_value;
      // Remove fields if lazy is disabled.
      if (!$image_fields[$key]) {
        unset($image_fields[$key]);
      }

      $config = \Drupal::configFactory()->getEditable('lazy.settings');
      $config->set('image_fields', $image_fields)->save();
    }

    $element['lazy_image'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable lazy-loading'),
      '#default_value' => $default_value,
    ];
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function lazy_field_formatter_settings_summary_alter(&$summary, $context) {
  if (
    in_array($context['formatter']->getPluginId(), lazy_field_formatters(), TRUE)
    && $context['formatter']->getThirdPartySetting('lazy', 'lazy_image', FALSE)
  ) {
    $summary[] = t('Lazy-loading enabled');
  }
}

/**
 * Implements template_preprocess_field().
 */
function lazy_preprocess_field(&$variables) {
  $element = $variables['element'];
  if (!empty($element['#third_party_settings']) && !empty($element['#third_party_settings']['lazy']['lazy_image'])) {
    foreach ($variables['items'] as $key => $item) {
      $variables['items'][$key]['content']['#item_attributes']['data-lazy'] = TRUE;
    }
  }
}

/**
 * Implements template_preprocess_image().
 */
function lazy_preprocess_image(&$variables) {
  if (array_key_exists('data-lazy', $variables['attributes'])) {
    // We don't need `data-lazy` attribute anymore.
    unset($variables['attributes']['data-lazy']);
    $config = \Drupal::config('lazy.settings')->get();
    if ($config && \Drupal::service('lazy')->isPathAllowed($config['disabled_paths'])) {
      // Required attribute for enabling native lazy-loading.
      $variables['attributes']['loading'] = 'lazy';
      // Set the selector class.
      $variables['attributes']['class'][] = $config['lazysizes']['lazyClass'];
      // Set the new `src` attribute.
      $variables['attributes'][$config['lazysizes']['srcAttr']] = $variables['attributes']['src'];
      // If defined use placeholder image in `src` attribute. Remove otherwise.
      if ($config['placeholderSrc']) {
        $variables['attributes']['src'] = $config['placeholderSrc'];
      }
      else {
        unset($variables['attributes']['src']);
      }
      // Set the new `srcset` attribute.
      if (isset($variables['attributes']['srcset'])) {
        $variables['attributes'][$config['lazysizes']['srcsetAttr']] = $variables['attributes']['srcset'];
        unset($variables['attributes']['srcset']);
      }
      // Set the new `sizes` attribute.
      if (isset($variables['attributes']['sizes'])) {
        $variables['attributes'][$config['lazysizes']['sizesAttr']] = $variables['attributes']['sizes'];
        unset($variables['attributes']['sizes']);
      }
    }
  }
}

/**
 * Implements template_preprocess_responsive_image().
 */
function lazy_preprocess_responsive_image(&$variables) {
  if (array_key_exists('data-lazy', $variables['attributes'])) {
    // The `data-lazy` attribute will be removed in `lazy_preprocess_image()`.
    $config = \Drupal::config('lazy.settings')->get();
    if ($config && \Drupal::service('lazy')->isPathAllowed($config['disabled_paths'])) {
      foreach ($variables['sources'] as $source) {
        if (isset($source['srcset'])) {
          $source[$config['lazysizes']['srcsetAttr']] = $source['srcset'];
          unset($source['srcset']);
        }
        if (isset($source['sizes'])) {
          $source[$config['lazysizes']['sizesAttr']] = $source['sizes'];
          unset($source['sizes']);
        }
      }
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function lazy_page_attachments(array &$attachments) {
  $config = \Drupal::config('lazy.settings')->get();
  $lazy = \Drupal::service('lazy');
  if ($config && $lazy->isPathAllowed($config['disabled_paths'])) {
    $plugins = $lazy->getPlugins();
    $config['lazysizes']['plugins'] = array_intersect_key($plugins, $config['lazysizes']['plugins']);
    $options = [
      'lazysizes' => $config['lazysizes'],
      'placeholderSrc' => $config['placeholderSrc'],
      'preferNative' => $config['preferNative'],
    ];
    $attachments['#attached']['drupalSettings']['lazy'] = $options;
    $attachments['#attached']['library'][] = 'lazy/lazy';

    $lazyloaded = $config['lazysizes']['loadedClass'];
    $lazyclass = $config['lazysizes']['lazyClass'];
    $sizes = $config['lazysizes']['sizesAttr'];
    $attachments['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'style',
        '#value' => '/* @see https://github.com/aFarkas/lazysizes#broken-image-symbol */' .
        ".js img.${lazyclass}:not([src]) { visibility: hidden; }" .
        '/* @see https://github.com/aFarkas/lazysizes#automatically-setting-the-sizes-attribute */' .
        ".js img.${lazyloaded}[${sizes}=auto] { display: block; width: 100%; }",
      ],
      'lazy-lazysizes',
    ];
    $attachments['#cache']['tags'][] = 'config:lazy.settings';
  }
}

/**
 * Callback function to check whether lazy is enabled in any text-formats.
 *
 * @return array|false
 *   Returns lazy configuration array if enabled, false otherwise.
 *
 * @deprecated in lazy:8.x-3.0 and is removed from lazy:8.x-3.1.
 *   Use \Drupal::service('lazy')->isEnabled() instead.
 *
 * @see https://www.drupal.org/node/3087640
 */
function lazy_is_enabled() {
  @trigger_error("lazy_is_enabled() is deprecated in lazy:8.x-3.0 and is removed from lazy:8.x-3.1. Use \Drupal::service('lazy')->isEnabled(); instead. See https://www.drupal.org/node/3087640", E_USER_DEPRECATED);
  return \Drupal::service('lazy')->isEnabled();
}

/**
 * Checks whether lazy-load is disabled for the current path.
 *
 * @param string $disabled_paths
 *   List of paths whether Lazy should be enabled.
 *
 * @return bool
 *   Whether Lazy is allowed for the requested path.
 *
 * @deprecated in lazy:8.x-3.0 and is removed from lazy:8.x-3.1.
 *   Use \Drupal::service('lazy')->isPathAllowed($disabled_paths) instead.
 *
 * @see https://www.drupal.org/node/3087638
 */
function lazy_disabled_by_path($disabled_paths) {
  @trigger_error('lazy_disabled_by_path() is deprecated in lazy:8.x-3.0 and is removed from lazy:8.x-3.1. Use \Drupal::service("lazy")->isPathAllowed($disabled_paths); instead. See https://www.drupal.org/node/3087638', E_USER_DEPRECATED);
  return \Drupal::service('lazy')->isPathAllowed($disabled_paths);
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function lazy_field_formatter_info_alter(array &$info) {
  $formatters = \Drupal::config('lazy.settings')->get('formatters');

  if (isset($info['lazy_image']) && (!(boolean) $formatters['lazy_image'] || !\Drupal::moduleHandler()->moduleExists('image'))) {
    unset($info['lazy_image']);
  }

  if (isset($info['lazy_responsive_image']) && (!(boolean) $formatters['lazy_responsive_image'] || !\Drupal::moduleHandler()->moduleExists('responsive_image'))) {
    unset($info['lazy_responsive_image']);
  }
}
