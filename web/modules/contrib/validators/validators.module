<?php

/**
 * @file
 * Symfony Validators for Drupal.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_form_alter().
 */
function validators_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'validators_form_validate';
}

/**
 * Implements hook_form_validate().
 */
function validators_form_validate($form, FormStateInterface $form_state) {
  // Check if a validator has been set for every form element.
  foreach (Element::children($form) as $element_key) {
    // Only execute the validator if a value has been set.
    $value = $form_state->getValue($element_key);
    if (isset($form[$element_key]['#validators']) && $value != NULL) {
      $violations = array();
      foreach ($form[$element_key]['#validators'] as $constraint_key => $constraint_value) {
        // A form can have a single validator. In that case, the array key
        // will be numeric.
        if (is_numeric($constraint_key)) {
          $constraint = $constraint_value;
          $options = array();
        }
        // When a form has multiple validators, the array key will be the
        // validator.
        else {
          $constraint = $constraint_key;
          $options = is_array($constraint_value) ? $constraint_value : array();
        }
        $violations = \Drupal::service('validators.validator')->violations($constraint, $value, $options);
      }
      foreach ($violations as $violation) {
        $form_state->setErrorByName($element_key, t($violation));
      }
    }

    // Recursive call the same function again in order to support nested render
    // arrays.
    validators_form_validate($form[$element_key], $form_state);
  }
}
